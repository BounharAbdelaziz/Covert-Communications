%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Rate Region simulation %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Steps to follow:% - define a simple channel% - verify the constaints (absolute continuity)% - compute the rate% - do a loop on P_T, P_{X2 \mid T}, P_{X1 \mid T} and \epsilon_T%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%clear all;DEBUG_covert=0;DEBUT=0;%% define channelX2_cardinality =2 % can be changedX1_cardinality =2 % fixedY_cardinality = 4 % can be changed W_Y_X1_X2 = [0.2, 0.3, 0.2, 0.3; 0.1, 0.2, 0.3, 0.4;0.23,0.46, 0.12, 0.19; 0.33,0.26, 0.22, 0.19];   %% first X2_cardinality rows for x1=0 and latter for  x1=1 W_Z_X1_X2 = [0.3, 0.2, 0.1, 0.4; 0.3, 0.2, 0.15, 0.35;0.33,0.15, 0.23, 0.29; 0.23,0.26, 0.22, 0.29];  %% first X2_cardinality rows for x1=0 and latter for  x1=1 max_epsilon_t=1;% ShortcutsW_Y_X1_0_X2= W_Y_X1_X2(1: X2_cardinality, :);W_Y_X1_1_X2= W_Y_X1_X2( X2_cardinality+1: 2*X2_cardinality, :);W_Z_X1_0_X2= W_Z_X1_X2(1: X2_cardinality, :);W_Z_X1_1_X2= W_Z_X1_X2(X2_cardinality+1: 2*X2_cardinality, :);%% Check conditionsabsolute_continuity_bob= (sum(sum((W_Y_X1_1_X2 >0) | (W_Y_X1_1_X2 ==0)))==0);absolute_continuity_eve= (sum(sum((W_Z_X1_1_X2 >0) | (W_Z_X1_1_X2 ==0)))==0);different_output_distributions_eve = (sum(sum( W_Z_X1_1_X2  ==W_Z_X1_0_X2))>0);  if (absolute_continuity_bob || absolute_continuity_eve || different_output_distributions_eve )   555555   else   % set secret_key_threshold sk=30; % can be changed. Needs to be positive T_cardinality=40 % for comparison can be put to a smaller value N_epochs=5000;       for epoch =1:N_epochs          P_T                 = InformationTheory.generate_probability_vector(T_cardinality,1,1,0,1);        Epsilon_T           = max_epsilon_t*rand(T_cardinality,1);        if (X2_cardinality > 1)            P_X2_mid_T          = InformationTheory.generate_probability_vector(X2_cardinality, T_cardinality,1,0,1);        else            % As it's deterministic            P_X2_mid_T          = ones(X2_cardinality, T_cardinality);        end;                                         %% check whether chosen pmfs satisfy key rate                  for x2=1:X2_cardinality                difference_Ds(x2)=InformationTheory.relative_entropy(W_Z_X1_1_X2(x2,:), W_Z_X1_0_X2(x2,:))-InformationTheory.relative_entropy(W_Y_X1_1_X2(x2,:), W_Y_X1_0_X2(x2,:));                chi_2 (x2)= InformationTheory.chi_2_distance(W_Z_X1_1_X2(x2,:), W_Z_X1_0_X2(x2,:));            end;         for t=1:T_cardinality            numerator_T(t)= Epsilon_T(t)*difference_Ds*P_X2_mid_T(:,t) ;            denominator_T(t)= chi_2* P_X2_mid_T(:,t)*(Epsilon_T(t))^2;              end;          numerator=numerator_T*P_T;          denominator=denominator_T*P_T;          sk_ratio=sqrt(2)*numerator./(sqrt(denominator));                            if   sk_ratio >sk            44444          else                       r1 = CovertCommunication.covert_message_rate(P_T, P_X2_mid_T, Epsilon_T, W_Y_X1_X2, W_Z_X1_X2, X2_cardinality, Y_cardinality, X1_cardinality*X2_cardinality, DEBUG_covert);              r1_vect(epoch) = r1;                                    r2 = conditional_MI(P_T, P_X2_mid_T, W_Y_X1_0_X2, X2_cardinality, Y_cardinality);              r2_vect(epoch) = r2;                  end; %end else (sk_rate satisfied)            end; % end epoch    figure(1);plot(r1_vect, r2_vect);end; % end else (channel is good)