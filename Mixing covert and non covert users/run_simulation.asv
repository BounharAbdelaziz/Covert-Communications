function [r1_vect, r2_vect, rk_vect, cpt, cpt_higher_than_max_P_X1_1] = run_simulation( ...
                                            W_Y_X1_X2, W_Z_X1_X2, uniform_P_T, ...
                                            T_cardinality, X1_cardinality, X2_cardinality, Y_cardinality, X1_X2_cardinality, ...
                                            swap_channels_for_need_sk, max_epsilon_t, optimize_epsilons_T, ...
                                            max_P_X1_1, compute_marginal_PY, ...
                                            DEBUG, DEBUG_covert, DEBUG_covert_theorem_contraints, tolerance,...
                                            N_epochs, draw_covert_point)
    
    % to count the number of times we didn't verify the conditions of the theorem inside the loop.
    cpt = 0;
    % to count the number of times P_{X1}(1) > max_P_X1_1
    cpt_higher_than_max_P_X1_1      = 0;
    % for fixed epsilon_T
    if (ismembertol(optimize_epsilons_T, 0, tolerance))
        disp('[INFO] Running experiment with fixed Epsilon_T')
        Epsilon_T           = max_epsilon_t*rand(T_cardinality,1); %[0.3 0.1 0.2 0.4];
    else
        disp('[INFO] Running experiment with different Epsilon_T')
    end    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Rate Region simulation %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    % Covert user rates
    r1_vect = zeros(N_epochs,1);
    
    % Non covert user rates
    r2_vect = zeros(N_epochs,1);
    
    % Secret key rates
    rk_vect = zeros(N_epochs,1);
    
    % covert region
    if draw_covert_point
        covert_points = zeros(N_epochs,1);
    end
    
    if (swap_channels_for_need_sk)
        swap = W_Z_X1_X2;
        W_Z_X1_X2 = W_Y_X1_X2;
        W_Y_X1_X2 = swap;
    end
    
    % iterate over all input distributions.
    disp('[INFO] Starting simulation now...');
    for epoch = progress(1:N_epochs)
        
        % Generate new P_T
        if (uniform_P_T)
            P_T                 = (1/T_cardinality)*ones(T_cardinality,1);
        else
            P_T                 = InformationTheory.generate_probability_vector(T_cardinality,1,1,0,1);
        end
    
        if (ismembertol(optimize_epsilons_T, 1, tolerance))
        % The epsilon's that normalizes the probability of sending one for the covert user (we choose them summing to one for now but it's not necessary)
            Epsilon_T           = max_epsilon_t*rand(T_cardinality,1); %[0.3 0.1 0.2 0.4];
        end
    
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Conditional input disbutions P_X1_mid_T and P_X2_mid_T %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        

        P_X1_mid_T = InformationTheory.generate_probability_vector(X1_cardinality, T_cardinality,1,0,1);
        P_X2_mid_T = InformationTheory.generate_probability_vector(X2_cardinality, T_cardinality,1,0,1);
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Verify if conditions are met with these choices %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
        [verified_conditions, absolute_continuity_bob, absolute_continuity_eve, different_output_distributions_eve, without_secret_key_condition] = CovertCommunication.check_theorem_conditions(W_Y_X1_X2, W_Z_X1_X2, T_cardinality, Epsilon_T, P_X2_mid_T, X2_cardinality, Y_cardinality, X1_X2_cardinality, swap_channels_for_need_sk, DEBUG_covert_theorem_contraints);
    
        if (verified_conditions < 1)
            cpt = cpt+1;

            if (DEBUG)
                disp('[ERROR-Constraint] Absolute continuity is not met! Check bellow which one you need to fix.');
                disp(['[INFO] absolute_continuity_bob : ', num2str(absolute_continuity_bob)]);
                disp(['[INFO] absolute_continuity_eve : ', num2str(absolute_continuity_eve)]);
                disp(['[INFO] different_output_distributions_eve : ', num2str(different_output_distributions_eve)]);
                disp(['[INFO] without_secret_key_condition : ', num2str(without_secret_key_condition)]);
            end
            continue % go to next iteration
        end   
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Marginal distributions P_X1 and P_X2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        P_X1                = zeros(1,X1_cardinality);
        
        for x1=1:X1_cardinality
            avg = 0;
            for t=1:T_cardinality
                avg = avg + P_X1_mid_T(x1,t) * P_T(t);
            end
            P_X1(x1) = avg;
        end
    
        if (P_X1(1) > max_P_X1_1)
            cpt_higher_than_max_P_X1_1 = cpt_higher_than_max_P_X1_1 +1;
            continue
        end
    
    
        P_X2                = zeros(1,X2_cardinality);
        for i=1:X2_cardinality
            avg = 0;
            for t=1:T_cardinality
                avg = avg + P_X2_mid_T(i,t) * P_T(t);
            end
            P_X2(i) = avg;
        end
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Marginal distributions P_Y %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
        if (compute_marginal_PY)
            P_X1_X2 = [P_X1(1)*P_X2(1) P_X1(1)*P_X2(2) P_X1(2)*P_X2(1) P_X1(2)*P_X2(2)]; % [P1(1)*P2(1) P1(0)*P2(1) P1(1)*P2(0) P1(1)*P2(1)]
       
            P_Y = zeros(1,Y_cardinality);
            for i=1:length(P_Y)
                P_Y(i) = dot(P_X1_X2, W_Y_X1_X2(:,i));
            end
        end
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Computing the rates %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
           
        W_Y_X1_0_X2 = zeros(X2_cardinality, Y_cardinality);
        for x2=1:X2_cardinality
            W_Y_X1_0_X2(x2,:) = W_Y_X1_X2(x2,:); % W_Y_X1_0_X2_x2
        end
                
        W_Y_X1_0 = zeros(1, Y_cardinality);
        for y=1:Y_cardinality
            W_y_X1_0 = 0;
            for x2=1:X2_cardinality
                W_y_X1_0 = W_y_X1_0 + P_X2(x2) * W_Y_X1_0_X2(x2,y);
            end
            W_Y_X1_0(y) = W_y_X1_0;
        end
    
        r1 = CovertCommunication.covert_message_rate(P_T, P_X2_mid_T, Epsilon_T, W_Y_X1_X2, W_Z_X1_X2, X2_cardinality, Y_cardinality, X1_X2_cardinality, DEBUG_covert);
        r1_vect(epoch) = r1;
        
        r2 = CovertCommunication.non_covert_rate(P_T, P_X2_mid_T, W_Y_X1_0, W_Y_X1_0_X2, DEBUG);
        r2_vect(epoch) = r2;
    
        rk = CovertCommunication.covert_sk_rate(P_T, P_X2_mid_T, Epsilon_T, W_Y_X1_X2, W_Z_X1_X2, X2_cardinality, Y_cardinality, X1_X2_cardinality, DEBUG_covert);
        rk_vect(epoch) = rk;
        
        if draw_covert_point
            covert_point = CovertCommunication.compute_covert_point(P_T, P_X2_mid_T, Epsilon_T, W_Z_X1_X2, X2_cardinality, Y_cardinality, DEBUG);
            covert_points(epoch) = covert_point;
        end
    end
end